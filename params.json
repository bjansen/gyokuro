{"name":"Gyokuro","tagline":"Web framework written in Ceylon","body":"# gyokuro\r\nA web framework written in Ceylon, which allows:\r\n\r\n* routing GET/POST requests to simple `(Request, Response)` handlers\r\n* creating annotated controllers containing more powerful handlers\r\n* serving static assets (HTML, CSS, JS, ...) from a directory\r\n\r\ngyokuro is based on the [Ceylon SDK](http://github.com/ceylon/ceylon-sdk), \r\nand uses `ceylon.net`'s server API.\r\n\r\n## Creating a simple webapp\r\n\r\nCreate a new Ceylon module:\r\n\r\n```ceylon\r\nmodule gyokuro.demo.rest \"1.0.0\" {\r\n\timport com.github.bjansen.gyokuro \"0.1\";\r\n\timport ceylon.net \"1.2.0\";\r\n}\r\n```\r\n\r\nAdd a runnable top level function that bootstraps a gyokuro application:\r\n\r\n```ceylon\r\nimport com.github.bjansen.gyokuro {\r\n\tApplication,\r\n\tget,\r\n\tpost\r\n}\r\n\r\n\"Run an HTTP server listening on port 8080, that will react to requests on /hello.\r\nStatic assets will be served from the `assets` directory.\"\r\nshared void run() {\r\n\r\n\t// React to GET/POST requests using a basic handler\r\n\tget(\"/hello\", void (Request request, Response response) {\r\n\t\tresponse.writeString(\"Hello yourself!\");\r\n\t});\r\n\t\r\n\t// Shorter syntax that lets Ceylon infer types\r\n\tpost(\"/hello\", (request, response) {\r\n\t\tresponse.writeString(\"You're the POST master!\");\r\n\t});\r\n\r\n\tvalue app = Application {\r\n\t\tassetsPath = \"assets\";\r\n\t};\r\n\t\r\n\tapp.run();\r\n}\r\n```\r\n\r\n## Binding parameters\r\n\r\nIn addition to basic handlers, gyokuro allows you to bind GET/POST data\r\ndirectly to function parameters, and return an object that represents your response:\r\n\r\n```ceylon\r\nshared void run() {\r\n\t// ...\r\n\tpost(\"/hello\", `postHandler`);\r\n\t// ...\r\n}\r\n\r\n\"Advanced handlers have more flexible parameters, you're\r\n not limited to `Request` and `Response`, you can bind\r\n GET/POST values directly to handler parameters!\r\n The returned value will be written to the response.\"\r\nString postHandler(Float float, Integer? optionalInt, String who = \"world\") {\r\n\t// `float` is required, `optionalInt` is optional and\r\n\t// `who` will be defaulted to \"world\" if it's not in POST data.\r\n\treturn \"Hello, \" + who + \"!\\n\";\r\n}\r\n```\r\n\r\nGET/POST values are mapped by name and automatically converted to the correct type.\r\nNote that optional types and default values are also supported!\r\n\r\n## Using annotated controllers\r\n\r\nIn addition to `get` and `post` functions, gyokuro supports annotated controllers.\r\nUsing annotations, you can easily group related handlers in a same controller.\r\n\r\nLet's see how it works on a simple example:\r\n\r\n```ceylon\r\nshared void run() {\r\n\r\n\tvalue app = Application {\r\n\t\t// You can use REST-style annotated controllers like this:\r\n\t\trestEndpoint = [\"/rest\", `package gyokuro.demo.rest`];\r\n\t};\r\n\t\r\n\tapp.run();\r\n}\r\n```\r\n\r\nThe package `gyokuro.demo.rest` will be scanned for classes annotated with `controller`.\r\nEach function annotated with `route` will be mapped to the corresponding path. For example:\r\n\r\n```ceylon\r\nimport ceylon.net.http.server {\r\n\tResponse\r\n}\r\nimport com.github.bjansen.gyokuro {\r\n\tcontroller,\r\n\troute\r\n}\r\n\r\nroute(\"duck\")\r\ncontroller class SimpleRestController() {\r\n\t\r\n\troute(\"talk\")\r\n\tshared void makeDuckTalk(Response resp) {\r\n\t\tresp.writeString(\"Quack world!\");\r\n\t}\r\n}\r\n```\r\n\r\nWill be mapped to `http://localhost:8080/rest/duck/talk`.\r\n\r\n## Want to learn more?\r\n\r\nSee the [wiki](https://github.com/bjansen/gyokuro/wiki) for more documentation.\r\n","google":"UA-20750042-3","note":"Don't delete this file! It's used internally to help with page regeneration."}